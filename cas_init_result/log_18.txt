#INFO: **** input file is /home/hewenhao/Downloads/test_noah2/vqe-casscf/Figure_4.py ****
import json
import numpy as np
import scipy
from pyscf import gto, scf, mcscf
import sys
import time
import os
import re
import glob
import matplotlib.pyplot as plt
import matplotlib as mpl
from pennylane.qchem import excitations
from vqe_driver import PennyLaneSolver, perm_orca2pyscf

FILE = "data_H4/inference.json"

def run_casscf_with_guess(mol, mo_guess, ncas, nelecas, label=""):
    print(f"\nRunning CASSCF with {label} initial guess...")
    mf_init = scf.RHF(mol)
    mf_init.kernel()

    mc = mcscf.CASSCF(mf_init, ncas=ncas, nelecas=nelecas)
    mc.fcisolver = PennyLaneSolver(mf_init)
    mc.mo_coeff = mo_guess

    start = time.time()
    mc.kernel()
    end = time.time()

    print(f"CASSCF ({label} guess) took {end - start:.2f} seconds")
    return mc

def load_inference_data(filename=FILE):
    with open(filename, "r") as file:
        data = json.load(file)
    pos_l = data["pos"]
    elements_l = data["elements"]
    proj_l = data["proj"]
    name_l = data["name"]

    return pos_l, elements_l, proj_l, name_l

def process_index(ind, pos_l, elements_l, proj_l, name_l):
    pos = pos_l[ind]
    elements = elements_l[ind]
    proj = np.array(proj_l[ind])
    name = name_l[ind]

    atom = [[ele, tuple(coord)] for ele, coord in zip(elements, pos)]

    log_path = f"cas_init_result/log_{name[:-5]}.txt"
    os.makedirs(os.path.dirname(log_path), exist_ok=True)
    sys.stdout = open(log_path, "w")

    print(name)
    print(atom)

    # Overlap and projection matrix processing
    S = gto.M(atom=atom, basis="cc-pVDZ").intor("int1e_ovlp")
    sqrtS = scipy.linalg.sqrtm(S).real
    perm = perm_orca2pyscf(atom=atom, basis="cc-pVDZ")
    proj = perm @ proj @ perm.T
    eigvals, eigvecs = np.linalg.eig(proj)
    idx = np.argsort(eigvals)[::-1]
    sorted_eigvecs = eigvecs[:, idx]
    sorted_eigvecs = np.linalg.inv(sqrtS) @ sorted_eigvecs
    rand_orbitals = sorted_eigvecs

    # Build molecule
    mol = gto.M(atom=atom, basis='cc-pVDZ', spin=0, charge=0, verbose=4, output=log_path)

    # Run HF
    mf_hf = scf.RHF(mol)
    mf_hf.kernel()
    hf_orbitals = mf_hf.mo_coeff

    run_casscf_with_guess(mol, rand_orbitals, ncas=4, nelecas=4, label="NN")
    run_casscf_with_guess(mol, hf_orbitals, ncas=4, nelecas=4, label="HF")

    sys.stdout.close()
    sys.stdout = sys.__stdout__

def run_all_calculations(pos_l, elements_l, proj_l, name_l, max_index=23):
    for i in range(max_index):
        process_index(i, pos_l, elements_l, proj_l, name_l)

def extract_log_data(log_files):
    pattern_steps = re.compile(r'CASSCF converged in\s+(\d+)\s+macro\s+\(\s*(\d+)\s+JK\s+(\d+)\s+micro')
    pattern_energy = re.compile(r'CASSCF energy\s*=\s*([-+]?\d*\.\d+(?:[eE][-+]?\d+)?)')
    
    results = []
    
    for log_file in log_files:
        with open(log_file, "r") as f:
            lines = f.readlines()

        # Extract steps
        matches_steps = [pattern_steps.search(line) for line in lines if "CASSCF converged" in line]
        matches_steps = [m for m in matches_steps if m]
        
        # Extract energies
        matches_energy = [pattern_energy.search(line) for line in lines if "CASSCF energy" in line]
        matches_energy = [m for m in matches_energy if m]

        if len(matches_steps) >= 2 and len(matches_energy) >= 2:
            nn_steps = tuple(map(int, matches_steps[0].groups()))
            hf_steps = tuple(map(int, matches_steps[1].groups()))
            nn_energy = float(matches_energy[0].group(1))
            hf_energy = float(matches_energy[1].group(1))
            results.append((log_file, nn_steps, hf_steps, nn_energy, hf_energy))
        else:
            print(f"Warning: {log_file} missing matches (Steps: {len(matches_steps)}, Energies: {len(matches_energy)})")
    
    return results

# Print results in a formatted table
def print_results_table(results):
    print(f"{'File':<15} {'NN_macro':>9} {'NN_JK':>6} {'NN_micro':>9} {'NN_energy':>14} | {'HF_macro':>9} {'HF_JK':>6} {'HF_micro':>9} {'HF_energy':>14}")
    print("-" * 95)
    for filename, nn_steps, hf_steps, nn_energy, hf_energy in results:
        print(f"{filename:<15} {nn_steps[0]:>9} {nn_steps[1]:>6} {nn_steps[2]:>9} {nn_energy:>14.8f} | "
              f"{hf_steps[0]:>9} {hf_steps[1]:>6} {hf_steps[2]:>9} {hf_energy:>14.8f}")


def organize_data_for_plotting(results, num_chains=25, bond_length_interval=0.1):
    lengths = [bond_length_interval * point for point in range(3, num_chains + 1)]
    
    nn_macro, nn_jk, nn_micro = [], [], []
    hf_macro, hf_jk, hf_micro = [], [], []
    nn_energy, hf_energy = [], []
    indices = []
    
    for filename, nn_steps, hf_steps, nn_en, hf_en in results:
        nn_macro.append(nn_steps[0])
        nn_jk.append(nn_steps[1]) 
        nn_micro.append(nn_steps[2])
        hf_macro.append(hf_steps[0])
        hf_jk.append(hf_steps[1])
        hf_micro.append(hf_steps[2])
        nn_energy.append(nn_en)
        hf_energy.append(hf_en)
        indices.append(int(re.search(r'\d+', filename).group()))
    
    return {
        'lengths': lengths,
        'nn_data': [nn_macro, nn_jk, nn_micro],
        'hf_data': [hf_macro, hf_jk, hf_micro],
        'nn_energy': nn_energy,
        'hf_energy': hf_energy,
        'indices': indices
    }


def plot_step_comparisons(data_dict, save_figs=True):
    mpl.rcParams['pdf.fonttype'] = 42
    
    lengths = data_dict['lengths']
    nn_data_all = data_dict['nn_data']
    hf_data_all = data_dict['hf_data']
    
    fig_titles = ['Macro Iterations', 'JK Steps', 'Micro Iterations']
    ylabels = ['Macro Steps', 'JK Steps', 'Micro Steps']
    y_limits = [12, 120, 25]

    for i in range(3):
        plt.figure()
        plt.plot(lengths[:-2], nn_data_all[i][:-2], label='BasisNN', marker='o', markerfacecolor='white')
        plt.plot(lengths[:-2], hf_data_all[i][:-2], label='HF', marker='o', markerfacecolor='white')
        plt.xlabel('Bond Length (Å)')
        plt.ylabel(ylabels[i])
        plt.title(f'CASSCF {fig_titles[i]} Comparison')
        plt.tick_params(axis='both', direction='in', length=6, width=1, labelsize=14, top=True, right=True)
        plt.xlim(0, 2.5)
        plt.ylim(0, y_limits[i])
        plt.legend()
        plt.tight_layout()
        
        if save_figs:
            plt.savefig(f'figs/casscf_{fig_titles[i].lower().replace(" ", "_")}.pdf', metadata={"TextAsShapes": False})

# This is part of Figure 4
def plot_energy_difference(data_dict, save_figs=True):
    lengths = data_dict['lengths']
    nn_energy = data_dict['nn_energy']
    hf_energy = data_dict['hf_energy']
    
    # Calculate energy difference in milli-Hartree
    energy_diff = np.array([nn - hf for nn, hf in zip(nn_energy, hf_energy)]) * 1e3
    print('Energy difference (mHa):', energy_diff)

    plt.figure()
    plt.plot(lengths[:-2], energy_diff[:-2], label='ΔE (NN - HF)', 
             marker='o', markerfacecolor='white', color='red')
    plt.axhline(0, color='gray', linestyle='--', linewidth=1)
    plt.xlabel('Bond Length (Å)')
    plt.ylabel('Energy Difference ($10^{-3}$ Ha)')
    plt.title('CASSCF Energy Difference (NN - HF)')
    plt.tick_params(axis='both', direction='in', length=6, width=1, labelsize=14, top=True, right=True)
    plt.xlim(0, 2.5)
    plt.ylim(-3, 0.5)
    plt.legend()
    plt.tight_layout()
    
    if save_figs:
        plt.savefig('figs/casscf_energy_difference.pdf', metadata={"TextAsShapes": False})


def plot_convergence_curve(log_file="log_4.txt", save_figs=True):
    try:
        with open(log_file, "r") as f:
            lines = f.readlines()
    except FileNotFoundError:
        raise FileNotFoundError(f"{log_file} not found in the current directory.")

    # Extract initial CASCI energy
    casci_lines = [line for line in lines if "CASCI E" in line]
    basisNN_E0 = float(re.search(r"CASCI E =\s*(-?\d+\.\d+)", casci_lines[0]).group(1))
    hf_E0 = float(re.search(r"CASCI E =\s*(-?\d+\.\d+)", casci_lines[2]).group(1))

    # Extract macro iteration energies
    macro_pattern = re.compile(r"CASSCF E =\s*(-?\d+\.\d+)")
    macro_lines = [line for line in lines if "macro iter" in line]
    basisNN_lines = macro_lines[:2]
    hf_lines = macro_lines[2:]

    basisNN_E = [basisNN_E0] + [float(macro_pattern.search(line).group(1)) for line in basisNN_lines]
    hf_E = [hf_E0] + [float(macro_pattern.search(line).group(1)) for line in hf_lines]

    # Plotting
    plt.figure(figsize=(6, 4))
    plt.plot(range(len(basisNN_E)), basisNN_E, label="BasisNN init", marker='o', markerfacecolor='white')
    plt.plot(range(len(hf_E)), hf_E, label="HF init", marker='o', markerfacecolor='white')
    plt.xlabel("Macro Iteration")
    plt.ylabel("CASSCF Energy (Ha)")
    plt.title(f"CASSCF Energy Convergence ({log_file})")
    plt.legend()
    plt.tick_params(axis='both', direction='in', length=6, width=1, labelsize=14, top=True, right=True)
    plt.xlim(0, 6)
    plt.ylim(-2.16, -2.12)
    plt.tight_layout()
    
    if save_figs:
        plt.savefig("figs/log4_casscf_energy_curve.pdf", metadata={"TextAsShapes": False})

    plt.show()


def main():
    print("=== Figure 4 Analysis ===")
    
    # Load molecular data
    pos_l, elements_l, proj_l, name_l = load_inference_data(FILE)
    
    run_all_calculations(pos_l, elements_l, proj_l, name_l, max_index=23)
    
    # Extract data from log files
    log_files = sorted(glob.glob("cas_init_result/log_*.txt"), key=lambda x: int(re.search(r'\d+', x).group()))
    results = extract_log_data(log_files)
    
    # Print results table
    print_results_table(results)
    
    # Organize data for plotting
    data_dict = organize_data_for_plotting(results)
    
    print("\n Plots:")
    plot_step_comparisons(data_dict, save_figs=True)
    plot_energy_difference(data_dict, save_figs=True) # This is for Figure 4
    plot_convergence_curve("log_4.txt", save_figs=True)
    
    return results, data_dict


if __name__ == "__main__":
    results, data_dict = main()
    
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='hewenhao-tb-p16p', release='6.11.0-24-generic', version='#24~24.04.1-Ubuntu SMP PREEMPT_DYNAMIC Tue Mar 25 20:14:34 UTC 2', machine='x86_64')  Threads 20
Python 3.9.23 (main, Jun  5 2025, 13:40:20) 
[GCC 11.2.0]
numpy 1.26.4  scipy 1.13.1  h5py 3.14.0
Date: Fri Aug 15 15:40:54 2025
PySCF version 2.10.0
PySCF path  /home/hewenhao/anaconda3/envs/pennylane39/lib/python3.9/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 4
[INPUT] num. electrons = 4
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 H      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT]  2 H      2.099999904633   0.000000000000   0.000000000000 AA    3.968424681368   0.000000000000   0.000000000000 Bohr   0.0
[INPUT]  3 H      4.199999809265   0.000000000000   0.000000000000 AA    7.936849362737   0.000000000000   0.000000000000 Bohr   0.0
[INPUT]  4 H      6.300000190735   0.000000000000   0.000000000000 AA   11.905274945197   0.000000000000   0.000000000000 Bohr   0.0

nuclear repulsion = 1.09195294662318
number of shells = 12
number of NR pGTOs = 28
number of NR cGTOs = 20
basis = cc-pVDZ
ecp = {}
CPU time:      7102.32


******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
diis_damp = 0
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /tmp/tmpq06twour
max_memory 4000 MB (current use 275 MB)
Set gradient conv threshold to 3.16228e-05
Initial guess from minao.
init E= -1.32411520792165
  HOMO = -0.222645801507464  LUMO = -0.139824821064785
cycle= 1 E= -1.81540855339492  delta_E= -0.491  |g|= 0.0655  |ddm|= 1.12
  HOMO = -0.343854318465859  LUMO = -0.100187108364392
cycle= 2 E= -1.82064456424207  delta_E= -0.00524  |g|= 0.0233  |ddm|= 0.142
  HOMO = -0.350804549017414  LUMO = -0.0938203029430937
cycle= 3 E= -1.82191901841619  delta_E= -0.00127  |g|= 0.00814  |ddm|= 0.0813
  HOMO = -0.353285713909265  LUMO = -0.0915503014915994
cycle= 4 E= -1.82208183824451  delta_E= -0.000163  |g|= 0.00235  |ddm|= 0.0358
  HOMO = -0.353424824233409  LUMO = -0.0907690405580238
cycle= 5 E= -1.82209010093929  delta_E= -8.26e-06  |g|= 0.000174  |ddm|= 0.0068
  HOMO = -0.353453044981331  LUMO = -0.0907727894508306
cycle= 6 E= -1.82209012400171  delta_E= -2.31e-08  |g|= 9.74e-06  |ddm|= 0.000384
  HOMO = -0.353452708702724  LUMO = -0.0907694756063735
cycle= 7 E= -1.82209012405463  delta_E= -5.29e-11  |g|= 5.31e-07  |ddm|= 1.5e-05
  HOMO = -0.353452912011063  LUMO = -0.090770070554691
Extra cycle  E= -1.82209012405478  delta_E= -1.53e-13  |g|= 1.14e-07  |ddm|= 9.64e-07
converged SCF energy = -1.82209012405478


******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
diis_damp = 0
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /tmp/tmpp3_qk9qn
max_memory 4000 MB (current use 275 MB)
Set gradient conv threshold to 3.16228e-05
Initial guess from minao.
init E= -1.32411520792165
  HOMO = -0.222645801507463  LUMO = -0.139824821064785
cycle= 1 E= -1.81540855339492  delta_E= -0.491  |g|= 0.0655  |ddm|= 1.12
  HOMO = -0.343854318465859  LUMO = -0.100187108364392
cycle= 2 E= -1.82064456424207  delta_E= -0.00524  |g|= 0.0233  |ddm|= 0.142
  HOMO = -0.350804549017414  LUMO = -0.0938203029430933
cycle= 3 E= -1.82191901841619  delta_E= -0.00127  |g|= 0.00814  |ddm|= 0.0813
  HOMO = -0.353285713909264  LUMO = -0.0915503014915978
cycle= 4 E= -1.82208183824451  delta_E= -0.000163  |g|= 0.00235  |ddm|= 0.0358
  HOMO = -0.353424824233409  LUMO = -0.0907690405580237
cycle= 5 E= -1.82209010093929  delta_E= -8.26e-06  |g|= 0.000174  |ddm|= 0.0068
  HOMO = -0.353453044981331  LUMO = -0.0907727894508306
cycle= 6 E= -1.82209012400171  delta_E= -2.31e-08  |g|= 9.74e-06  |ddm|= 0.000384
  HOMO = -0.353452708702724  LUMO = -0.0907694756063768
cycle= 7 E= -1.82209012405463  delta_E= -5.29e-11  |g|= 5.31e-07  |ddm|= 1.5e-05
  HOMO = -0.353452912011063  LUMO = -0.0907700705546915
Extra cycle  E= -1.82209012405478  delta_E= -1.54e-13  |g|= 1.14e-07  |ddm|= 9.64e-07
converged SCF energy = -1.82209012405478

******** <class 'pyscf.mcscf.mc1step.CASSCF'> ********
CAS (2e+2e, 4o), ncore = 0, nvir = 16
max_cycle_macro = 50
max_cycle_micro = 4
conv_tol = 1e-07
conv_tol_grad = None
orbital rotation max_stepsize = 0.02
orbital rotation threshold for CI restart = 0.01
augmented hessian ah_max_cycle = 30
augmented hessian ah_conv_tol = 1e-12
augmented hessian ah_linear dependence = 1e-14
augmented hessian ah_level shift = 1e-08
augmented hessian ah_start_tol = 2.5
augmented hessian ah_start_cycle = 3
augmented hessian ah_grad_trust_region = 3
kf_trust_region = 3
kf_interval = 4
ci_response_space = 4
ci_grad_trust_region = 3
with_dep4 0
natorb = False
canonicalization = True
sorting_mo_energy = False
ao2mo_level = 2
chkfile = /tmp/tmpp3_qk9qn
max_memory 4000 MB (current use 275 MB)
internal_rotation = False
CASCI E = -2.02305843608181
Set conv_tol_grad to 0.000316228
macro iter   1 ( 11 JK    4 micro), CASSCF E = -2.02324310882677  dE = -1.84672745e-04
               |grad[o]|=0.019  |ddm|=0.00696  |maxRot[o]|=0.00503
macro iter   2 (  1 JK    1 micro), CASSCF E = -2.02324307348208  dE =  3.53446867e-08
               |grad[o]|=2.44e-05  |ddm|=0.00102  |maxRot[o]|=    0
1-step CASSCF converged in   2 macro ( 12 JK   5 micro) steps
CASSCF canonicalization
Density matrix diagonal elements [1.55784929 1.39607664 0.60127525 0.44479883]
CASSCF energy = -2.02324307348208
CASCI E = -2.02324307348208  E(CI) = -3.11519602010526


******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
diis_damp = 0
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /tmp/tmptgg9hjie
max_memory 4000 MB (current use 276 MB)
Set gradient conv threshold to 3.16228e-05
Initial guess from minao.
init E= -1.32411520792165
  HOMO = -0.222645801507464  LUMO = -0.139824821064785
cycle= 1 E= -1.81540855339492  delta_E= -0.491  |g|= 0.0655  |ddm|= 1.12
  HOMO = -0.343854318465859  LUMO = -0.100187108364392
cycle= 2 E= -1.82064456424207  delta_E= -0.00524  |g|= 0.0233  |ddm|= 0.142
  HOMO = -0.350804549017414  LUMO = -0.0938203029430938
cycle= 3 E= -1.82191901841619  delta_E= -0.00127  |g|= 0.00814  |ddm|= 0.0813
  HOMO = -0.353285713909264  LUMO = -0.0915503014915983
cycle= 4 E= -1.82208183824451  delta_E= -0.000163  |g|= 0.00235  |ddm|= 0.0358
  HOMO = -0.353424824233409  LUMO = -0.0907690405580233
cycle= 5 E= -1.82209010093929  delta_E= -8.26e-06  |g|= 0.000174  |ddm|= 0.0068
  HOMO = -0.353453044981332  LUMO = -0.0907727894508315
cycle= 6 E= -1.82209012400171  delta_E= -2.31e-08  |g|= 9.74e-06  |ddm|= 0.000384
  HOMO = -0.353452708702724  LUMO = -0.0907694756063738
cycle= 7 E= -1.82209012405463  delta_E= -5.29e-11  |g|= 5.31e-07  |ddm|= 1.5e-05
  HOMO = -0.353452912011063  LUMO = -0.0907700705546913
Extra cycle  E= -1.82209012405478  delta_E= -1.54e-13  |g|= 1.14e-07  |ddm|= 9.64e-07
converged SCF energy = -1.82209012405478

******** <class 'pyscf.mcscf.mc1step.CASSCF'> ********
CAS (2e+2e, 4o), ncore = 0, nvir = 16
max_cycle_macro = 50
max_cycle_micro = 4
conv_tol = 1e-07
conv_tol_grad = None
orbital rotation max_stepsize = 0.02
orbital rotation threshold for CI restart = 0.01
augmented hessian ah_max_cycle = 30
augmented hessian ah_conv_tol = 1e-12
augmented hessian ah_linear dependence = 1e-14
augmented hessian ah_level shift = 1e-08
augmented hessian ah_start_tol = 2.5
augmented hessian ah_start_cycle = 3
augmented hessian ah_grad_trust_region = 3
kf_trust_region = 3
kf_interval = 4
ci_response_space = 4
ci_grad_trust_region = 3
with_dep4 0
natorb = False
canonicalization = True
sorting_mo_energy = False
ao2mo_level = 2
chkfile = /tmp/tmptgg9hjie
max_memory 4000 MB (current use 276 MB)
internal_rotation = False
CASCI E = -1.98632721864990
Set conv_tol_grad to 0.000316228
